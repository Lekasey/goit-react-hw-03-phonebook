{"version":3,"sources":["Components/ContactListItem/ContactListItem.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","Components/Form/Form.js","App.js","index.js"],"names":["ContactListItem","name","number","onClick","className","type","ContactList","contacts","onDeleteContact","map","id","Filter","value","onChange","Form","state","submitHandler","e","preventDefault","contact","shortId","generate","props","onSubmit","reset","handleInputChange","currentTarget","setState","this","pattern","title","required","Component","App","filter","isContactPresent","newContact","normalizedNewContact","toLowerCase","includes","length","addContact","alert","prevState","deleteContact","idToDelete","changeFilter","localStorage","getItem","parsedContacts","JSON","parse","setItem","stringify","normalizedFilter","visibleContacts","defaultProps","PropTypes","array","string","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82dcd2b7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactListItem.css';\n\nconst ContactListItem = ({ name, number, onClick }) => {\n  return (\n    <li className=\"ContactListItem\">\n      <p>\n        {name}: <span>{number}</span>\n      </p>\n      <button className=\"button\" type=\"button\" onClick={onClick}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\nexport default ContactListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ContactListItem from '../ContactListItem';\nimport './ContactList.css';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          number={number}\n          onClick={() => onDeleteContact(id)}\n        ></ContactListItem>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n  onClick: PropTypes.func,\n};\n\nexport default ContactList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Filter.css';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <>\n      <label>\n        Find contacts by name\n        <input\n          className=\"filterInput\"\n          type=\"text\"\n          name=\"filter\"\n          value={value}\n          onChange={onChange}\n        />\n      </label>\n    </>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { Component } from 'react';\nimport shortId from 'shortid';\nimport PropTypes from 'prop-types';\nimport './Form.css';\n\nclass Form extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  submitHandler = e => {\n    e.preventDefault();\n    const contact = {\n      id: shortId.generate(),\n      name: this.state.name,\n      number: this.state.number,\n    };\n\n    this.props.onSubmit(contact);\n    this.reset();\n  };\n\n  handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form className=\"form\" onSubmit={this.submitHandler}>\n        <label className=\"label\">\n          Name\n          <input\n            className=\"input\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            value={name}\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.handleInputChange}\n          />\n        </label>\n        <label className=\"label\">\n          Number\n          <input\n            className=\"input\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n            value={number}\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            required\n            onChange={this.handleInputChange}\n          />\n        </label>\n        <button className=\"button\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nexport default Form;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ContactList from './Components/ContactList';\nimport Filter from './Components/Filter';\nimport Form from './Components/Form';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({\n        contacts: parsedContacts,\n      });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  isContactPresent = newContact => {\n    const normalizedNewContact = newContact.name.toLowerCase();\n    const nameSearch = this.state.contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedNewContact),\n    );\n    nameSearch.length === 0\n      ? this.addContact(newContact)\n      : alert(`${newContact.name} is already in contacts`);\n  };\n\n  addContact = newContact => {\n    this.setState(prevState => ({\n      contacts: [newContact, ...prevState.contacts],\n    }));\n  };\n\n  deleteContact = idToDelete => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== idToDelete),\n    }));\n  };\n\n  changeFilter = e => {\n    const { value } = e.currentTarget;\n    this.setState({\n      filter: value,\n    });\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    const visibleContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <Form onSubmit={this.isContactPresent} />\n        <div className=\"wrapper\">\n          <h2>Contacts</h2>\n          <Filter value={filter} onChange={this.changeFilter} />\n          {contacts.length > 0 ? (\n            <ContactList\n              contacts={visibleContacts}\n              onDeleteContact={this.deleteContact}\n            />\n          ) : (\n            <p className=\"noContacts\">No contacts added yet</p>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\nApp.defaultProps = {\n  contacts: PropTypes.array,\n  filter: PropTypes.string,\n};\n\nApp.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  filter: PropTypes.string,\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}